Notes on RPCemu dynarec :

The makefile does not include the relevant files as of yet, as this is totally experimental.
In order to compile, you must remove arm.c, and include ArmDynarec.c and codegen_x86.c.
ArmDynarecOps.c is included in ArmDynarec.c, and doesn't need to be compiled seperately.

This only works on x86-32 at the moment. An x86-64 port shouldn't be too difficult. Other
ports probably will be.

This hasn't been tested on linux at all.

This hasn't been tested on that many programs. The ones that have been tested are :

RISC OS 3.7
!Quake
!FQuake
!Freedoom
!OpenTTD
!FishTank2
!PCengine
MAME
!Freestyle
!Zero
!MetaMorph
!Jan3D
!Icon
!Damn - The only program that failed to work (does this work on a real StrongARM?)

You must be in SA110 emulation for this to work. I haven't tested with ARM610, ARM710 or
ARM7500, but I suspect these will crash fairly quickly, due to the difference in CP15 cache
handling.

No provision has been made to disable the dynarec and drop back to an interpreter. A simple
way of doing this is to monitor the cache enable bit in CP15 and return 0 for isblockvalid()
if this is disabled.

The instruction cache currently uses a whopping 64 megs. This can most likely be reduced,
but you would need to pay attention to the hashing function.


This isn't a true dynarec at the moment, it's what would be called a threaded interpreter. It
does generate code blocks, but instead of generating native code, it generates calls to 
handler functions for every opcode. This eliminates instruction fetch and (in many cases)
condition checking. A full dynarec shouldn't be a massive jump from here.

The code blocks are flushed when the StrongARM Icache is flushed. This means that, as on a
real StrongARM, self modifying code won't really work.


The performance increase on my main machine (Athlon X2 4200+) ranges from about 20% (!SICK,
RISC OS in general) to 100% (!Fishtank2). 

Benchmarks noted :

Dhrystone - 107k (was 80k with interpreter)
!FQuake   - 7.4 fps average (16fps on real SA)
The highest instruction rate I've seen so far is on Fishtank2, which runs at around 65-70 
MIPS.


Ideas for optimisations/design flaws:

When the Icache is flushed, all blocks are flushed. In theory it shouldn't have to flush the
blocks in ROM. It should be fairly easy to hardcode this for RISC OS (keep everything mapped
between 3800000 and 3FFFFFF) but this would mess up other operating systems (eg ARMLinux,
NetBSD - not that these actually run at the moment).

Blocks always end when the PC could be modified (depending on condition codes). In theory, if
a jump is not taken, then it should be possible to continue the block and put a check in the
generated code for when the jump _is_ taken.

The recompiler doesn't handle small loops very well. It should be possible for backwards 
jumps into locations in the same block to simply jump rather than end the block, and enter it
again. There would need to be some kind of limit though, to prevent hardware polling loops to
circle forever.

R15 is updated after each instruction. It should be possible to only update it at the end of
a block, or when it is read.

Abort checking is done after every instruction. It should be done only after instructions 
that access memory, eg LDR/STR/LDM/STM/SWP. 

It might be possible to support self modifying code, by keeping a 'page dirty' bit, and
checking it on relevant blocks. If the bit is set, flush every block on the current page. Not
sure what effect this would have on performance, or if there would even be much point - the
StrongARM came out 11 years ago, and no program in that time would/should be using self
modifying code without flushing the cache.

Obviously this should become a proper dynarec at some point - eg generate actual code for
each instruction.